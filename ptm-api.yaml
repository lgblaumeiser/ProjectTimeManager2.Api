openapi: 3.0.0
info:
  title: Project Time Manager API
  description: Description of Project Time Manager API
  version: 2.0.0

servers:
  - url: http://localhost:27727
    description: Project time manager currently runs typically locally on the host machine

paths:

# Activity API

  /activities:
    get:
      summary: Return all activities of the user given by the authentication
      operationId: getActivities
      tags:
        - activities
      security:
        - BearerAuth: []
      parameters:
        - name: hidden
          description: A boolean indicating to show all activities including the hidden ones, defaults to false
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: List of all activities of the user 
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Activities'
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

    post:
      summary: Create a new activity for the user given by the authentication
      operationId: addActivity
      tags:
        - activities
      security:
        - BearerAuth: []
      requestBody:
        description: The data of the new activity. All elements of the data structure are mandatory
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewActivityData'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
          
  /activities/{activityId}:
    get:
      summary: Access an activity by id, if the resource belongs to user
      operationId: getActivity
      tags:
        - activities
      security:
        - BearerAuth: []
      parameters: 
        - name: activityId
          description: id of the requested activity
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The requested activity 
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'

    patch:
      summary: Change an existing activity, if the resource belongs to the user
      operationId: changeActivity
      tags:
        - activities
      security:
        - BearerAuth: []
      parameters: 
        - name: activityId
          description: id of the requested activity
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The data for the change, all fields are optional, at least one must be changed
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeActivityData'
      responses:
        '204':
          $ref: '#/components/responses/SuccessfullyChanged'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'

# Booking API

  /bookings:
    get:
      summary: Access bookings for the user of a day or a range of days
      operationId: getBookings
      tags:
        - bookings
      security:
        - BearerAuth: []
      parameters:
        - name: day
          description: A date string, return bookings from this day on including the day
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: until
          description: A date string, return bookings until this day excluding the day, not needed for single day requests
          in: query
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: List of all bookings of the user within the given time frame
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Bookings'
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

    post:
      summary: Create a new booking for the authenticated user
      operationId: addBooking
      tags:
        - bookings
      security:
        - BearerAuth: []
      requestBody:
        description: The data of the new booking, bookingday, starttime and activity are mandatory, endtime and comment are optional
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingData'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /bookings/{bookingId}:
    get:
      summary: Access a booking, if the resource belongs to the user
      operationId: getBooking
      tags:
        - bookings
      security:
        - BearerAuth: []
      parameters:
        - name: bookingId
          description: id of the requested booking
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The requested booking 
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'

    patch:
      summary: Change an existing booking, if the resource belongs to the user
      operationId: changeBooking
      tags:
        - bookings
      security:
        - BearerAuth: []
      parameters: 
        - name: bookingId
          description: id of the booking to change
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The data to change in the booking, all fields are optional, at least one field must be changed
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingData'
      responses:
        '204':
          $ref: '#/components/responses/SuccessfullyChanged'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'

    post:
      summary: Add a break to the booking by splitting it, i.e., shorten the booking and create a second booking after the break, returns the uri of the created booking
      operationId: addBreak
      tags:
        - bookings
      security:
        - BearerAuth: []
      parameters:
        - name: bookingId
          description: id of the requested booking
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The break data to be used in the split, breakstart is mandatory, breaklength is the length in minutes, it defaults to 30 minutes and is optional
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddBreak'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'

    delete:
      summary: Delete a booking, if the resource belongs to the user
      operationId: deleteBooking
      tags:
        - bookings
      security:
        - BearerAuth: []
      parameters:
        - name: bookingId
          description: id of the booking to change
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          $ref: '#/components/responses/SuccessfullyDeleted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'

# Analysis API

  /analysis/{analyzer}:
    get:
      summary: Get an analysis on the bookings in the given timeframe
      operationId: runAnalysis
      tags:
        - analysis
      security:
        - BearerAuth: []
      parameters: 
        - name: analyzer
          description: Name of the requested analyzer
          in: path
          required: true
          schema:
            type: string
            format: enum
        - name: startdate
          description: Start day for the analysis, including the given day
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: enddate
          description: End day for the analysis, excluding the given day
          in: query
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: The requested analysis result as a string table 
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Analysis'
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

# User API
  
  /users:
    post:
      summary: Register a new user, needs no authentication
      operationId: registerUser
      tags:
        - users
      requestBody:
        description: The data of the new user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUserData'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

    put:
      summary: Reset the password of the user, authentication provided by answer to stored question stored in the password field of the given request body
      operationId: resetPassword
      tags:
        - users
      requestBody:
        description: Username and answer for the user that wants a resetted password
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticationData"
      responses:    
        '200':
          description: The users password has been changed, the new password is returned
          content:
            text/plain; charset=utf-8:
              schema:
                type: string
                format: password
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          description: Answer does not match to the username
        '500':
          $ref: '#/components/responses/InternalError'

  /users/authenticate
    post:
      summary: Authenticate a registered user by password, returns a jwt token
      operationId: authenticateUser
      tags:
        - users
      requestBody:
        description: User and password of the user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationData'
      responses:
        '200':
          description: User authenticated, required jwt token returned
          content:
            text/plain; charset=utf-8:
              schema:
                type: string
                format: password
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          description: Given user password combination is not known
        '500':
          $ref: '#/components/responses/InternalError'

  /users/profile:
    get:
      summary: Get the email and question of a user, reference done via authenticated user
      operationId: getUser
      tags:
        - users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: The user data, except password and answer
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

    patch:
      summary: Change properties of the user, except username, this is unchangeable
      operationId: changeUser
      tags:
        - users
      security:
        - BearerAuth: []
      requestBody:
        description: The data to change for the user, all fields are optional, at least one has to be changed
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeUserData"
      responses:
        '204':
          $ref: '#/components/responses/SuccessfullyChanged'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

    delete:
      summary: Delete a user and all its data from the database
      operationId: deleteUser
      security:
        - BearerAuth: []
      tags:
        - users
      responses:
        '204':
          $ref: '#/components/responses/SuccessfullyDeleted'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

# Infrastructure API

  /backup:
    get:
      summary: Create a backup of the database
      operationId: backup
      tags:
        - backup
      security:
        - BearerAuth: [ admin ]
      responses:
        '200':
          description: A backup of the database data as zip file
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAccess'
        '500':
          $ref: '#/components/responses/InternalError'

    put:
      summary: Restore a backup and replace existing database
      operationId: restore
      tags:
        - backup
      security:
        - BearerAuth: [ admin ]
      requestBody:
        description: The data to restore in the database
        required: true
        content:
          application/zip:
            schema:
              type: string
              format: binary
      responses:
        '204':
          description: Database restored successfully, old data deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAccess'
        '500':
          $ref: '#/components/responses/InternalError'
  
  /licenses:
    get:
      summary: Returns the attribution information on the used Open Source Software
      operationId: license
      tags:
        - legal
      responses:
        '200':
          description: The attribution information as text
          content:
            text/plain; charset=utf-8:
              schema:
                type: string
        '500':
          $ref: '#/components/responses/InternalError'

components:
  responses:
    Created:
      description: Resource created successfully, return the location uri of the created resource in response header
    SuccessfullyChanged:
      description: Resource changed successfully
    SuccessfullyDeleted:
      description: Resource deleted successfully
    NoContent:
      description: The requested collection is empty
    Unauthorized:
      description: User not authorized
    BadRequest:
      description: Bad data given to the request, returns the error message of the server
      content:
        text/plain; charset=utf-8:
          schema:
            type: string
    Forbidden:
      description: The requested resource does not belong to the authenticated user
    AdminAccess:
      description: Admin access needed for this operation
    InternalError:
      description: The request resulted in an unexpected exception, returns the error message of the server
      content:
        text/plain; charset=utf-8:
          schema:
            type: string
      
  schemas:
    Activity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectName:
          type: string
        activityName:
          type: string
        projectId:
          type: string
        activityId:
          type: string
        hidden:
          type: boolean
    
    NewActivityData:
      type: object
      properties:
        projectName:
          type: string
        activityName:
          type: string
        projectId:
          type: string
        activityId:
          type: string
    
    ChangeActivityData:
      type: object
      properties:
        projectName:
          type: string
        activityName:
          type: string
        projectId:
          type: string
        activityId:
          type: string
        hidden:
          type: boolean
    
    Activities:
      type: array
      items:
        $ref: "#/components/schemas/Activity"

    Booking:
      type: object
      properties:
        id:
          type: integer
          format: int64
        bookingday:
          type: string
          format: date
        starttime:
          type: string
          format: time
        endtime:
          type: string
          format: time
        activity:
          type: integer
          format: int64
        comment:
          type: string

    BookingData:
      type: object
      properties:
        bookingday:
          type: string
          format: date
        starttime:
          type: string
          format: time
        endtime:
          type: string
          format: time
        activity:
          type: integer
          format: int64
        comment:
          type: string

    Bookings:
      type: array
      items:
        $ref: "#/components/schemas/Booking"

    AddBreak:
      type: object
      properties:
        breakstart:
          type: string
          format: time
        breaklength:
          type: integer
          format: int32
      
    Analysis:
      type: array
      items:
        type: array
        items:
          type: string

    User:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        question:
          type: string

    NewUserData:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
        email:
          type: string
          format: email
        question:
          type: string
        answer:
          type: string
          format: password
    
    ChangeUserData:
      type: object
      properties:
        password:
          type: string
          format: password
        email:
          type: string
          format: email
        question:
          type: string
        answer:
          type: string
          format: password
    
    AuthenticationData:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
